set viminfo+=n$HOME/.cache/vim/viminfo
set runtimepath=$HOME/.vim,$VIM,$VIMRUNTIME

set t_Co=256        " 256 colors enabled
set ls=2            " allways show status line #powerline plugin
set tabstop=4       " numbers of spaces of tab character
set shiftwidth=4    " numbers of spaces to (auto)indent
set scrolloff=3     " keep 3 lines when scrolling
set showcmd         " display incomplete commands
set hlsearch        " highlight searches
set number          " show line numbers
set relativenumber  " use relative number for navigation mode
set numberwidth=5   " number of spaces in line number
set background=dark " adapt colors for background
set mouse=a         " enable mouse (fix mouse scrolling in urxvt)
set showmatch
set cursorline      " Enable CursorLine
set nocompatible    " be iMproved
set encoding=utf-8
set nocscopeverbose " Workaround to fix duplicated message
set bs=2            " This influences the behavior of the backspace option. It is fairly complex so see :help 'bs' for more details.
"set wrapmargin=8    " This is the number of characters from the right window border where wrapping starts.
set ruler           " This makes vim show the current row and column at the bottom right of the screen.
set tabpagemax=100

set errorformat+=remote:\ %f:%l:%c:%m
set title

if &t_Co == 256
	hi CursorLine  ctermbg=235  ctermfg=NONE     cterm=NONE
	hi LineNr      ctermbg=NONE ctermfg=DarkGrey cterm=NONE    term=bold
	hi diffAdded   ctermbg=NONE ctermfg=blue     cterm=NONE
	hi diffChanged ctermbg=NONE ctermfg=green    cterm=NONE
	hi diffRemoved ctermbg=NONE ctermfg=red      cterm=NONE
	hi WARN        ctermbg=red
	hi SignColumn  ctermbg=235

	" Change Color when entering Insert Mode
	autocmd InsertEnter * highlight  CursorLine ctermbg=17 ctermfg=NONE

	" Revert Color to default when leaving Insert Mode
	autocmd InsertLeave * highlight  CursorLine ctermbg=235 ctermfg=NONE
endif

set spellfile=$HOME/.vim/spell/en.utf-8.add
exec 'silent mkspell! ' . &spellfile . '.spl ' . &spellfile
autocmd FileType gitcommit,debchangelog setlocal spell spelllang=en

function! HandleURL()
	let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;]*')
	echo s:uri
	if s:uri != ""
		silent exec "!xdg-open '".s:uri."'"
		:redraw!
	else
		echo "No URI found in line."
	endif
endfunction
map <leader>u :call HandleURL()<cr>

" Toggle “invisible” characters
function! ToggleInvisible()
	if &list
		set lcs=
		set nolist
	else
		set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
		set list
	endif
endfunction

"filetype plugin indent on
"set foldenable
"set foldmethod=marker
"au FileType sh let g:sh_fold_enabled=5
"au FileType sh let g:is_bash=1
"au FileType sh set foldmethod=syntax

map <F2> gg=G
map <F3> :setlocal foldmethod=syntax
map <F7> :call ToggleInvisible()<CR>

" force to save if not have permissions
cmap w!! %!sudo tee > /dev/null %

" enable ctrl+c
vmap <C-c> y: call system("xclip -i -selection clipboard", getreg("\""))<CR>

match WARN /\s\+$/
autocmd FileType c,cpp match WARN /\s\+$\|\%>80v.\+/

" Rofi config
autocmd BufNewFile,BufRead *.rasi set syntax=css

" for python
autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4

" for patches and diff
autocmd Filetype diff,logreview setlocal nomodifiable

" for json
"autocmd Filetype json setlocal foldmethod=syntax

" for cve file
autocmd BufNewFile,BufRead CVE-[0-9][0-9][0-9][0-9]-[0-9N]\\\{4,\} set syntax=cve
autocmd BufNewFile,BufRead 00boilerplate.* set syntax=cve
autocmd BufNewFile,BufRead /tmp/check-cves.* set syntax=check_cves

" call gcc directly if a Makefile is not found
if !filereadable("Makefile")
	set makeprg=gcc\ -Wall\ -Wextra\ -ggdb\ -o\ %<\ %
endif

if filereadable(".make")
	set makeprg=.\ .make
endif

autocmd BufRead,BufNewFile ~/ubuntu/packages/* set makeprg=umt\ build\ -f
autocmd BufRead,BufNewFile ~/.Xresources       set makeprg=xrdb\ ~/.Xresources

map <F5> :make<CR><CR>
map <leader>t :tabe ~/snap/syncthing/common/notes/todo.txt/todo.txt<CR>
map <leader>T :tabe ~/snap/syncthing/common/notes/todo.txt/done.txt<CR>
map <leader>l :tabe ~/money/ledger/inbox.ledger<CR>

autocmd FileType json map <F2> :%!python3 -m json.tool<CR>

"""" GNU Coding Standards

function! GnuIndent()
	setlocal cindent
	setlocal cinoptions=>4,n-2,{2,^-2,:2,=2,g0,h2,p5,t0,+2,(0,u0,w1,m1
	setlocal expandtab
	setlocal shiftwidth=2
	setlocal tabstop=8
	setlocal softtabstop=2
	setlocal textwidth=80
	setlocal fo-=ro fo+=cql
endfunction

"autocmd FileType c,cpp call GnuIndent()
"autocmd BufEnter */grub*/* call GnuIndent()
autocmd BufEnter */grub*/**/*.{c,h} call GnuIndent()
autocmd BufEnter */linux*/**/*.{c,h} set makeprg=time\ make\ -j20\ all

"""" 80 Columns

if version >= 703
	set colorcolumn=80
endif
"let &colorcolumn=join(range(81,999),",")
highlight ColorColumn ctermbg=235


"""" Templates

augroup templates
	au!
	" read in templates files
	autocmd BufNewFile *.* silent! execute '0r ~/.vim/templates/skeleton.'.expand("<afile>:e")
augroup END


" Switch to absolute numbering in insert mode

au InsertEnter * :set norelativenumber
au InsertLeave * :set relativenumber


"""" Info

function! ShowInfo()
	let wordUnderCursor = expand("<cword>")
	let info = system("echo -n $(grep \"^".wordUnderCursor." \" ~/dict | cut -d' ' -f2-)")
	echo wordUnderCursor.": ".info
endfunction
map <F6> :call ShowInfo()<CR>


"""" Plugins

if filereadable(expand("~/.vim/autoload/plug.vim"))
	call plug#begin('~/.vim/plugged')

	Plug 'vim-scripts/ctags.vim'

	Plug 'vim-scripts/cscope_macros.vim'
	map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
	map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

	Plug 'scrooloose/nerdtree'
	map <F3> :NERDTreeToggle<CR>

	Plug 'scrooloose/nerdcommenter'

	Plug 'vimwiki/vimwiki'
	let g:vimwiki_dir_link = 'index'
	let g:vimwiki_fold_lists = 1
	let g:vimwiki_hl_cb_checked = 1
	let g:vimwiki_hl_headers = 1
	let g:vimwiki_url_maxsave = 0
	let g:vimwiki_use_mouse = 1
	let s:vimwiki_pvt = {}
	let s:vimwiki_pvt.path             = '~/snap/syncthing/common/notes'
	let s:vimwiki_pvt.path_html        = '~/snap/syncthing/common/notes/html'
	let s:vimwiki_pvt.ext              = '.md'
	let s:vimwiki_pvt.syntax           = 'markdown'
	let s:vimwiki_pvt.diary_rel_path   = 'diary/'
	let s:vimwiki_pvt.diary_index      = 'index'
	let s:vimwiki_pvt.diary_header     = 'Journal'
	let s:vimwiki_pvt.diary_sort       = 'desc'
	let s:vimwiki_ibm = {}
	let s:vimwiki_ibm.path             = '~/ibm/wiki'
	let s:vimwiki_ibm.path_html        = '~/ibm/wiki/html'
	let s:vimwiki_ibm.diary_rel_path   = 'diary/'
	let s:vimwiki_ibm.diary_index      = 'index'
	let s:vimwiki_ibm.diary_header     = 'Journal'
	let s:vimwiki_ibm.diary_sort       = 'desc'
	let g:vimwiki_list = [s:vimwiki_pvt, s:vimwiki_ibm]
	map <leader>wn :VimwikiDiaryNextDay<CR>
	map <leader>wp :VimwikiDiaryPrevDay<CR>

	"Plug 'vim-scripts/AutoComplPop'

	Plug 'vim-scripts/a.vim'

	Plug 'vim-scripts/SpellCheck'

	Plug 'vim-scripts/po.vim'

	Plug 'powerman/vim-plugin-viewdoc'

	if version >= 703
		Plug 'majutsushi/tagbar'
		nmap <F8> :TagbarToggle<CR>
	endif

	Plug 'kien/ctrlp.vim'

	"Plug 'vim-scripts/gnupg.vim'

	Plug 'vim-scripts/vcscommand.vim'

	Plug 'Shougo/unite.vim'
	nnoremap <space>/ :Unite grep:.<CR>
	nnoremap <space>y :Unite history/yanks<CR>
	nnoremap <space>s :Unite -quick-match buffer<CR>

	Plug 'tpope/vim-fugitive'

	Plug 'freitass/todo.txt-vim'

	"Plug 'fatih/vim-go'
	"autocmd BufNewFile,BufRead *.go :GoPath $HOME/projects/go

	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'
	let g:airline_powerline_fonts = 1
	"let g:airline_theme='luna'
	let g:airline_theme='wombat'
	let g:airline#extensions#tabline#enabled = 1
	let g:airline#extensions#tagbar#enabled = 1

	Plug 'ledger/vim-ledger'
	let g:ledger_maxwidth = 80
	let g:ledger_align_at = 56
	let g:ledger_fold_blanks = 1
	let g:ledger_fillstring = '· '
	let g:ledger_default_commodity = 'BRL'
	let g:ledger_commodity_sep = ' '
	let g:ledger_date_format = '%Y-%m-%d'
	let g:ledger_commodity_before = 0
	autocmd FileType ledger setlocal expandtab tabstop=4 shiftwidth=4
	autocmd FileType ledger nmap <F2> :%LedgerAlign<CR><CR>
	autocmd FileType ledger nmap <F3> :call ledger#transaction_state_toggle(line('.'), ' *!')<CR>
	autocmd FileType ledger nmap <F4> :call ledger#entry()<CR>
	autocmd FileType ledger inoremap <silent> <Tab> <C-r>=ledger#autocomplete_and_align()<CR>
	autocmd FileType ledger vnoremap <silent> <Tab> :LedgerAlign<CR>
	"autocmd FileType ledger inoremap : :<C-x><C-o>


	Plug 'chrisbra/csv.vim'

	Plug 'mhinz/vim-rfc'

	Plug 'pearofducks/ansible-vim'
	au BufRead,BufNewFile */ansible/*.yml set filetype=ansible
	let g:ansible_unindent_after_newline = 1

	Plug 'AndrewRadev/linediff.vim'

	Plug 'chrisbra/csv.vim'

	Plug 'tyru/open-browser.vim'

	Plug 'andreshazard/vim-logreview'

	Plug 'airblade/vim-gitgutter'

	Plug 'dag/vim-fish'

	Plug 'elzr/vim-json'

	if executable('/usr/bin/black')
		Plug 'psf/black'
	endif

	Plug 'sirtaj/vim-openscad'

	Plug 'cespare/vim-toml', { 'branch': 'main' }

	Plug 'puremourning/vimspector'

	Plug 'nathangrigg/vim-beancount'

	call plug#end()
endif

syntax on

" vim: syntax=vim
